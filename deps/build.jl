using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "hybrid-Lambda", :hybridlambda),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/cecileane/QuartetNetworkGoodnessFitBuilder/releases/download/v0.6.2-beta"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/HybridLambda.v0.6.2-beta.aarch64-linux-gnu.tar.gz", "dfa7fcb66f09be5ebda076892f3193b45fa704d5d697bc0430519c26c85a5d4a"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/HybridLambda.v0.6.2-beta.aarch64-linux-musl.tar.gz", "05cb2ead501941d75002293e989500243e12c600d88c4970755a96e4f70f68d4"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/HybridLambda.v0.6.2-beta.arm-linux-gnueabihf.tar.gz", "e076305984be66604f21b250fa69b920cfb346b0997ceada4cc6d9a6eb35f1de"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/HybridLambda.v0.6.2-beta.arm-linux-musleabihf.tar.gz", "00bf0ca1c37962f90cbccce1d4f6456ae243aad5ff05ed534633502b282120bf"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/HybridLambda.v0.6.2-beta.i686-linux-gnu.tar.gz", "5b3e4def0bbf29688f654002acfcc4012723be797e91c57381802fb1de16e287"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/HybridLambda.v0.6.2-beta.powerpc64le-linux-gnu.tar.gz", "04747f241da0236410d85895340409d87783202768f0d43749deeb42cfecf60f"),
    MacOS(:x86_64) => ("$bin_prefix/HybridLambda.v0.6.2-beta.x86_64-apple-darwin14.tar.gz", "176b3c7c3c9fc1e5f2a91e0d608a3d01bcedb38b65e93d99b63238b511782d0d"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/HybridLambda.v0.6.2-beta.x86_64-linux-gnu.tar.gz", "33e8194d5954e454850aa5cf8d8aa2888e79489cfa4cc2f783b482fcb8dc416a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    @warn "Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!"
end

if dl_info !== nothing
    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end

if dl_info !== nothing || !unsatisfied
    # Write out a deps.jl file that will contain mappings for our products
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
end
