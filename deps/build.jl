using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "hybrid-Lambda", :hybridlambda),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/cecileane/HybridLambdaBuilder/releases/download/v0.6.3-beta"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/HybridLambda.v0.6.3-beta.aarch64-linux-gnu.tar.gz", "25fd9884732898a05f61402ed94252f17ed0afb861cdc5ea5495fa80550b823f"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/HybridLambda.v0.6.3-beta.aarch64-linux-musl.tar.gz", "1d2f70519d060ca16df0219d3acd78eea93fb06601be2634689770d34866d86b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/HybridLambda.v0.6.3-beta.arm-linux-gnueabihf.tar.gz", "c8cc211510d585f8fa785f59d246c7c79a4de4588c3a43b127e440f040959c49"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/HybridLambda.v0.6.3-beta.arm-linux-musleabihf.tar.gz", "e11086ad9ff34a73442958426368b48f747638c0815b8b7e13719cc2a47f4eca"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/HybridLambda.v0.6.3-beta.i686-linux-gnu.tar.gz", "bb46daceeb2194fe8d353d60dac82923136ff1e62414e475bdca3c816027c59c"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/HybridLambda.v0.6.3-beta.powerpc64le-linux-gnu.tar.gz", "604778b3565f42040b915aab6a04da973cfc2010b913107eb258e32d8d99ec28"),
    MacOS(:x86_64) => ("$bin_prefix/HybridLambda.v0.6.3-beta.x86_64-apple-darwin14.tar.gz", "e07e30037a168bc88b68fd03c5e0640582a3c6e8b5339a37418a58ab9e2134f7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/HybridLambda.v0.6.3-beta.x86_64-linux-gnu.tar.gz", "799aa1470211f58a641f71ec5e5059f9ae49dd73a957000a4d948b52cbbab063"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    @warn "Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!"
end

if dl_info !== nothing
    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end

if dl_info !== nothing || !unsatisfied
    # Write out deps.jl that will contain mappings for our products:
    #   import Libdl
    #   const hybridlambda = joinpath(dirname(@__FILE__), "usr/bin/hybrid-Lambda")
    #   definition of function check_deps()
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
end
